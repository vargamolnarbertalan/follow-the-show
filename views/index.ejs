<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.1/moment.min.js"></script>
    <script src="https://rawgit.com/jeresig/jquery.hotkeys/master/jquery.hotkeys.js"></script>
    <title>Show Flow Manager</title>
    <style>
        table {
            width: 100%;
            border-collapse: collapse;
        }
        
        th,
        td {
            border: 1px solid #ddd;
            padding: 8px;
            text-align: left;
        }
        
        th {
            background-color: #f2f2f2;
        }
        
        .editable {
            border: 1px solid #ccc;
            padding: 6px;
        }
        
        .addrow {
            text-align: center;
            justify-content: center;
        }
    </style>
</head>

<body>
    <h1>Show Flow Manager</h1>
    <h1 id="project_name">Project name: <input id="project-name"></h1>
    <button onclick="downloadJson()">Download JSON</button>


    <table id="rundown">
        <tr>
            <th>#</th>
            <th>Start Time</th>
            <th>End Time</th>
            <th>Duration</th>
            <th>Title</th>
            <th>PGM</th>
            <th>EVS</th>
            <th>CG</th>
            <th>AUDIO</th>
            <th>Notes</th>
            <th>ACTIONS</th>
        </tr>

        <tr data-index=1 class="userinput">
            <td class="editable id" data-field="id">1</td>
            <td class="editable time" data-field="startTime"><input></td>
            <td class="editable time" data-field="endTime"><input></td>
            <td class="editable time" data-field="duration"><input></td>
            <td class="editable" data-field="title"><input></td>
            <td class="editable" data-field="pgm"><input></td>
            <td class="editable" data-field="evs"><input></td>
            <td class="editable" data-field="cg"><input></td>
            <td class="editable" data-field="audio"><input></td>
            <td class="editable" data-field="notes"><input></td>
            <td>
                <button class="duplicate">DUPLICATE</button>
                <button class="remove">REMOVE</button>
            </td>
        </tr>

        <tr id="lastrow">
            <td class="editable addrow" colspan="11"><button id="add">ADD</button></td>
        </tr>

    </table>

    <script>
        function calculateDuration(startTime, endTime) {
            // Parse input strings using Moment.js
            var startMoment = moment(startTime, 'HH:mm:ss')
            var endMoment = moment(endTime, 'HH:mm:ss')

            // Calculate duration
            var duration = moment.duration(endMoment.diff(startMoment))

            // Format duration as HH:mm:ss
            var formattedDuration = moment.utc(duration.asMilliseconds()).format('HH:mm:ss')

            return formattedDuration
        }

        function calculateEndTime(startTime, duration) {
            // Convert endTime and duration to moment objects
            var startMoment = moment(startTime, 'HH:mm:ss')
            var durationMoment = moment.duration(duration)

            // Calculate start time by subtracting duration from end time
            var endMoment = startMoment.add(durationMoment)

            // Format start time in 'HH:mm:ss' and return
            return endMoment.format('HH:mm:ss')
        }

        function updatedStartTime(index) {
            var rows = $("#rundown").find(`tr[class="userinput"]`)
                //console.log('rows length ' + rows.length)

            const endTimeEl = $(`tr[data-index=${index}] > td[data-field="endTime"] > input`)
            const durationEl = $(`tr[data-index=${index}] > td[data-field="duration"] > input`)
            const startTimeEl = $(`tr[data-index=${index}] > td[data-field="startTime"] > input`)

            endTimeEl.val(calculateEndTime(startTimeEl.val(), durationEl.val()))
            const start = index + 1
            console.log('start: ' + start)
            const stop = rows.length + 1
            console.log('stop: ' + stop)
            for (var i = start; i < stop; i++) {
                console.log('start recalc iteracio: ' + i)
                $(`tr[data-index=${i}] > td[data-field="startTime"] > input`).val($(`tr[data-index=${i-1}] > td[data-field="endTime"] > input`).val())
                $(`tr[data-index=${i}] > td[data-field="endTime"] > input`).val(calculateEndTime($(`tr[data-index=${i}] > td[data-field="startTime"] > input`).val(), $(`tr[data-index=${i}] > td[data-field="duration"] > input`).val()))
            }
        }

        function updatedEndTime(index) {
            var rows = $("#rundown").find(`tr[class="userinput"]`)
            const endTimeEl = $(`tr[data-index=${index}] > td[data-field="endTime"] > input`)
            const durationEl = $(`tr[data-index=${index}] > td[data-field="duration"] > input`)
            const startTimeEl = $(`tr[data-index=${index}] > td[data-field="startTime"] > input`)

            durationEl.val(calculateDuration(startTimeEl.val(), endTimeEl.val()))

            const start = index + 1
            console.log('start: ' + start)
            const stop = rows.length + 1
            console.log('stop: ' + stop)
            for (var i = start; i < stop; i++) {
                console.log('start recalc iteracio: ' + i)
                $(`tr[data-index=${i}] > td[data-field="startTime"] > input`).val($(`tr[data-index=${i-1}] > td[data-field="endTime"] > input`).val())
                $(`tr[data-index=${i}] > td[data-field="endTime"] > input`).val(calculateEndTime($(`tr[data-index=${i}] > td[data-field="startTime"] > input`).val(), $(`tr[data-index=${i}] > td[data-field="duration"] > input`).val()))
            }
        }

        function updatedDuration(index) {
            var rows = $("#rundown").find(`tr[class="userinput"]`)
            const endTimeEl = $(`tr[data-index=${index}] > td[data-field="endTime"] > input`)
            const durationEl = $(`tr[data-index=${index}] > td[data-field="duration"] > input`)
            const startTimeEl = $(`tr[data-index=${index}] > td[data-field="startTime"] > input`)

            endTimeEl.val(calculateEndTime(startTimeEl.val(), durationEl.val()))

            const start = index + 1
            console.log('start: ' + start)
            const stop = rows.length + 1
            console.log('stop: ' + stop)
            for (var i = start; i < stop; i++) {
                console.log('start recalc iteracio: ' + i)
                $(`tr[data-index=${i}] > td[data-field="startTime"] > input`).val($(`tr[data-index=${i-1}] > td[data-field="endTime"] > input`).val())
                $(`tr[data-index=${i}] > td[data-field="endTime"] > input`).val(calculateEndTime($(`tr[data-index=${i}] > td[data-field="startTime"] > input`).val(), $(`tr[data-index=${i}] > td[data-field="duration"] > input`).val()))
            }
        }

        function isValidTimeFormat(inputString) {
            //console.log(`input: ${inputString}`)
            // Regular expression for 'HH:mm:ss' format
            var timeRegex = /^(?:[01]\d|2[0-3]):[0-5]\d:[0-5]\d$/

            // Test the input string against the regular expression
            const res = timeRegex.test(inputString)
                //console.log(`res: ${res}`)
            return res
        }

        function updateTableRemove(deletedIndex, ogStart) {
            var rows = $("#rundown").find(`tr[class="userinput"]`)
            if (deletedIndex == 1) {
                for (var i = deletedIndex; i < rows.length + 1; i++) {
                    if (i == 1) {
                        console.log('iteracio: ' + i)
                        $(`tr[data-index=${i+1}] > td[data-field="id"]`).text(i)
                        $(`tr[data-index=${i+1}] > td[data-field="id"]`).val(i)

                        const duration = $(`tr[data-index=${i+1}] > td[data-field="duration"] > input`).val()
                        console.log('ogStart: ' + ogStart)
                        console.log('duration: ' + duration)
                        const newEndTime = calculateEndTime(ogStart, duration)
                        console.log(newEndTime)

                        $(`tr[data-index=${i+1}] > td[data-field="startTime"] > input`).val(ogStart)
                        $(`tr[data-index=${i+1}] > td[data-field="endTime"] > input`).val(newEndTime)
                        $(`tr[data-index=${i+1}]`).attr('data-index', i)
                    } else {
                        console.log('iteracio: ' + i)
                        $(`tr[data-index=${i+1}] > td[data-field="id"]`).text(i)
                        $(`tr[data-index=${i+1}] > td[data-field="id"]`).val(i)
                        const prevEndTime = $(`tr[data-index=${i-1}] > td[data-field="endTime"] > input`).val()
                            //console.log(prevEndTime)
                        const duration = $(`tr[data-index=${i+1}] > td[data-field="duration"] > input`).val()
                            //console.log(duration)
                        $(`tr[data-index=${i+1}] > td[data-field="startTime"] > input`).val(prevEndTime)
                        $(`tr[data-index=${i+1}] > td[data-field="endTime"] > input`).val(calculateEndTime(prevEndTime, duration))
                        $(`tr[data-index=${i+1}]`).attr('data-index', i)
                    }
                }

            } else {
                for (var i = deletedIndex; i < rows.length + 1; i++) {
                    console.log('iteracio: ' + i)
                    $(`tr[data-index=${i+1}] > td[data-field="id"]`).text(i)
                    $(`tr[data-index=${i+1}] > td[data-field="id"]`).val(i)
                    const prevEndTime = $(`tr[data-index=${i-1}] > td[data-field="endTime"] > input`).val()
                        //console.log(prevEndTime)
                    const duration = $(`tr[data-index=${i+1}] > td[data-field="duration"] > input`).val()
                        //console.log(duration)
                    $(`tr[data-index=${i+1}] > td[data-field="startTime"] > input`).val(prevEndTime)
                    $(`tr[data-index=${i+1}] > td[data-field="endTime"] > input`).val(calculateEndTime(prevEndTime, duration))
                    $(`tr[data-index=${i+1}]`).attr('data-index', i)
                }
            }

        }

        function downloadJson() {
            // Get the table element
            var table = document.getElementById('rundown')

            // Get the table headers
            var headers = []
            var headerRow = table.rows[1]
            for (var i = 0; i < headerRow.cells.length - 1; i++) {
                headers.push(headerRow.cells[i].getAttribute('data-field').toLowerCase())
            }

            // Create an array to store the JSON objects
            var jsonData = []

            // Iterate through each row and create JSON objects
            for (var i = 1; i < table.rows.length; i++) {
                var row = table.rows[i];
                var rowData = {};

                for (var j = 0; j < row.cells.length - 1; j++) {
                    var inputField = row.cells[j].querySelector('input');
                    if (inputField) {
                        rowData[headers[j]] = inputField.value;
                    } else {
                        rowData[headers[j]] = row.cells[j].textContent;
                    }
                }

                jsonData.push(rowData);
            }

            // Convert the array to JSON string
            var jsonString = JSON.stringify(jsonData, null, 2)

            // Create a Blob containing the JSON data
            var blob = new Blob([jsonString], {
                type: 'application/json'
            });

            // Create a link element to trigger the download
            var a = document.createElement('a')
            a.href = URL.createObjectURL(blob)
            a.download = 'data.json'

            // Append the link to the document and trigger the download
            document.body.appendChild(a)
            a.click();

            // Clean up: remove the link element
            document.body.removeChild(a)
        }


        $(document).ready(function() {
            $('body').on('click', '#add', function() {
                var rows = $("#rundown").find(`tr[class="userinput"]`)
                const lastEl = rows[rows.length - 1]
                var index = lastEl.getAttribute('data-index')
                index = Number(index)
                const startTime = $(`tr[data-index=${index}] > td[data-field="endTime"] > input`).val()
                if (startTime != "") {
                    index++
                    $('#lastrow').before(`
                    <tr data-index=${index} class="userinput">
                    <td class="editable id"  data-field="id">${index}</td>
                    <td class="editable time"  data-field="startTime"><input></td>
                    <td class="editable time"  data-field="endTime"><input></td>
                    <td class="editable time"  data-field="duration"><input></td>
                    <td class="editable"  data-field="title"><input></td>
                    <td class="editable"  data-field="pgm"><input></td>
                    <td class="editable"  data-field="evs"><input></td>
                    <td class="editable"  data-field="cg"><input></td>
                    <td class="editable"  data-field="audio"><input></td>
                    <td class="editable"  data-field="notes"><input></td>
                    <td>
                    <button class="duplicate">DUPLICATE</button>
                    <button class="remove">REMOVE</button>
                    </td>
                    </tr>
                    `)
                    $(`tr[data-index=${index}] > td[data-field="startTime"] > input`).val(startTime)
                    $(`tr[data-index=${index}] > td[data-field="startTime"] > input`).focus()
                }
            })

            $('body').on('click', '.remove', function() {
                var index = $(this).parent().parent().attr('data-index')
                index = Number(index)
                var ogStart = $(`tr[data-index=${index}] > td[data-field="startTime"] > input`).val()
                var rows = $("#rundown").find(`tr[class="userinput"]`)
                    //console.log(rows.length)
                if (rows.length > 1) {
                    $(this).parent().parent().remove()
                    updateTableRemove(index, ogStart)
                } else {
                    alert(`You must have at least 1 segment!`)
                }
            })

            $('body').on('click', '.duplicate', function() {
                var index = $(this).parent().parent().attr('data-index')
                index = Number(index)
                var rows = $("#rundown").find(`tr[class="userinput"]`)
                var ogDuration = $(`tr[data-index=${index}] > td[data-field="duration"] > input`).val()
                var ogInfo = []
                for (var x = 5; x < 11; x++) {
                    ogInfo.push($(`tr[data-index=${index}] > td:nth-child(${x}) > input`).val())
                    console.log('pushed, iteracio: ' + x)
                }
                console.log(ogInfo)

                const lastEl = rows[rows.length - 1]
                var last_index = lastEl.getAttribute('data-index')
                last_index = Number(last_index)
                const startTime = $(`tr[data-index=${last_index}] > td[data-field="endTime"] > input`).val()
                if (startTime != "") {
                    last_index++
                    $('#lastrow').before(`
                    <tr data-index=${last_index} class="userinput">
                    <td class="editable id"  data-field="id">${last_index}</td>
                    <td class="editable time"  data-field="startTime"><input></td>
                    <td class="editable time"  data-field="endTime"><input></td>
                    <td class="editable time"  data-field="duration"><input></td>
                    <td class="editable"  data-field="title"><input></td>
                    <td class="editable"  data-field="pgm"><input></td>
                    <td class="editable"  data-field="evs"><input></td>
                    <td class="editable"  data-field="cg"><input></td>
                    <td class="editable"  data-field="audio"><input></td>
                    <td class="editable"  data-field="notes"><input></td>
                    <td>
                    <button class="duplicate">DUPLICATE</button>
                    <button class="remove">REMOVE</button>
                    </td>
                    </tr>
                    `)
                    $(`tr[data-index=${last_index}] > td[data-field="startTime"] > input`).val(startTime)
                    $(`tr[data-index=${last_index}] > td[data-field="duration"] > input`).val(ogDuration)
                    $(`tr[data-index=${last_index}] > td[data-field="endTime"] > input`).val(calculateEndTime(startTime, ogDuration))
                    for (var y = 5; y < 11; y++) {
                        $(`tr[data-index=${last_index}] > td:nth-child(${y}) > input`).val(ogInfo[y - 5])
                    }
                }
            })

            $('body').on('keyup', 'input', function(event) {
                if (event.key === 'Enter') {
                    if ($(this).parent().hasClass('time') && !(isValidTimeFormat($(this).val()))) {
                        alert('Invalid format')
                        $(this).val("")
                    } else {
                        $(this).blur()
                        if ($(this).parent().attr('data-field') == 'startTime') {
                            updatedStartTime(Number($(this).parent().parent().attr('data-index')))
                        }
                        if ($(this).parent().attr('data-field') == 'duration') {
                            updatedDuration(Number($(this).parent().parent().attr('data-index')))
                        }
                        if ($(this).parent().attr('data-field') == 'endTime') {
                            updatedEndTime(Number($(this).parent().parent().attr('data-index')))
                        }
                    }
                }
            })

            $(document).bind('keydown', 'Shift+return', function() {
                //alert('triggered')
                $('#add').click()
            })
        })
    </script>
</body>

</html>