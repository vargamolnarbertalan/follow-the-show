<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <!-- Bootstrap CSS -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.1.3/dist/css/bootstrap.min.css" integrity="sha384-MCw98/SFnGE8fJT3GXwEOngsV7Zt27NXFoaoApmYm81iuXoPkFOJwJ8ERdknLPMO" crossorigin="anonymous">

    <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/popper.js@1.14.3/dist/umd/popper.min.js" integrity="sha384-ZMP7rVo3mIykV+2+9J3UJ46jBk0WLaUAdn689aCwoqbBJiSnjAK/l8WvCWPIPm49" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.1.3/dist/js/bootstrap.min.js" integrity="sha384-ChfqqxuZUCnJSK3+MXmPNIyE6ZbWh2IMqE241rYiqJxyMiZ6OW/JmZQ5stwEULTy" crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.1/moment.min.js"></script>
    <script src="https://rawgit.com/jeresig/jquery.hotkeys/master/jquery.hotkeys.js"></script>
    <title>Show Flow Manager</title>
    <link rel="icon" type="image/x-icon" href="/img/favicon.ico">
    <style>
        /*
        table {
            width: 100%;
            border-collapse: collapse;
        }
        
        th,
        td {
            border: 1px solid #ddd;
            padding: 8px;
            text-align: left;
        }
        
        th {
            background-color: #f2f2f2;
        }
        
        .editable {
            border: 1px solid #ccc;
            padding: 6px;
        }
        */
        
        body {
            padding: 5px;
        }
        
        .addrow {
            text-align: center;
            justify-content: center;
        }
        
        #rundown {
            margin-top: 15px;
            padding: 0;
            border-spacing: 0;
        }
        
        th,
        td {
            padding: 0;
        }
        
        input[type="text"] {
            width: 100%;
            box-sizing: border-box;
            -webkit-box-sizing: border-box;
            -moz-box-sizing: border-box;
        }
        
        .id>input {
            width: 40px;
        }
    </style>
    <link rel="icon" type="image/x-icon" href="favicon.ico">
</head>

<body>
    <!--
            <div class="alert alert-warning alert-dismissible fade show" role="alert">
                <strong>Warning!</strong>You must have at least one segment!
                <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                <span aria-hidden="true">&times;</span>
                </button>
            </div>
    -->


    <h1><span class="badge badge-secondary">Show Flow Manager</span></h1>
    <h2 id="project_name">Project name: <input id="project-name"></h2>
    <button class="btn btn-secondary" onclick="downloadJson()">Save</button>
    <button class="btn btn-secondary" id="#load" onclick="loadJSON()">Load</button>

    <table class="table table-striped table-dark table-hover table-sm" id="rundown">
        <!--
                    <colgroup>
            <col span="1" style="width: 3%;">
            <col span="1" style="width: 6%;">
            <col span="1" style="width: 6%;">
            <col span="1" style="width: 6%;">
            <col span="1" style="width: 10%;">
            <col span="1" style="width: 6%;">
            <col span="1" style="width: 25%;">
            <col span="1" style="width: 15%;">
            <col span="1" style="width: 10%;">
            <col span="1" style="width: 13%;">
        </colgroup>
        -->

        <tr>
            <th scope="col">#</th>
            <th scope="col">Start Time</th>
            <th scope="col">End Time</th>
            <th scope="col">Duration</th>
            <th scope="col">Title</th>
            <th scope="col">PGM</th>
            <th scope="col">EVS</th>
            <th scope="col">CG</th>
            <th scope="col">AUDIO</th>
            <th scope="col">Notes</th>
            <th scope="col">ACTIONS</th>
        </tr>

        <tr data-index=1 class="userinput">
            <th class="editable id" data-field="id"><input class="form-control-sm" value=1></td>
                <td class="editable time" data-field="startTime"><input class="form-control-sm"></td>
                <td class="editable time" data-field="endTime"><input class="form-control-sm"></td>
                <td class="editable time" data-field="duration"><input class="form-control-sm"></td>
                <td class="editable" data-field="title"><input class="form-control-sm"></td>
                <td class="editable" data-field="pgm"><input class="form-control-sm"></td>
                <td class="editable" data-field="evs"><input class="form-control-sm"></td>
                <td class="editable" data-field="cg"><input class="form-control-sm"></td>
                <td class="editable" data-field="audio"><input class="form-control-sm"></td>
                <td class="editable" data-field="notes"><input class="form-control-sm"></td>
                <td>
                    <button class="btn btn-primary duplicate">+</button>
                    <button class="btn btn-danger remove">X</button>
                </td>
        </tr>

        <tr id="lastrow">
            <td class="editable addrow " colspan="11"><button class="btn btn-success" id="add">üìù</button></td>
        </tr>

    </table>

    <script>
        var globalSocket

        function getGlobalSocket() {
            return globalSocket
        }

        function setGlobalSocket(socketObject) {
            globalSocket = socketObject
        }

        function calculateDuration(startTime, endTime) {
            // Parse input strings using Moment.js
            var startMoment = moment(startTime, 'HH:mm:ss')
            var endMoment = moment(endTime, 'HH:mm:ss')

            // Calculate duration
            var duration = moment.duration(endMoment.diff(startMoment))

            // Format duration as HH:mm:ss
            var formattedDuration = moment.utc(duration.asMilliseconds()).format('HH:mm:ss')

            return formattedDuration
        }

        function calculateEndTime(startTime, duration) {
            // Convert endTime and duration to moment objects
            var startMoment = moment(startTime, 'HH:mm:ss')
            var durationMoment = moment.duration(duration)

            // Calculate start time by subtracting duration from end time
            var endMoment = startMoment.add(durationMoment)

            // Format start time in 'HH:mm:ss' and return
            return endMoment.format('HH:mm:ss')
        }

        function updatedStartTime(index) {
            var rows = $("#rundown").find(`tr[class="userinput"]`)
                //console.log('rows length ' + rows.length)

            const endTimeEl = $(`tr[data-index=${index}] > td[data-field="endTime"] > input`)
            const durationEl = $(`tr[data-index=${index}] > td[data-field="duration"] > input`)
            const startTimeEl = $(`tr[data-index=${index}] > td[data-field="startTime"] > input`)

            endTimeEl.val(calculateEndTime(startTimeEl.val(), durationEl.val()))
            const start = index + 1
                //console.log('start: ' + start)
            const stop = rows.length + 1
                //console.log('stop: ' + stop)
            for (var i = start; i < stop; i++) {
                //console.log('start recalc iteracio: ' + i)
                $(`tr[data-index=${i}] > td[data-field="startTime"] > input`).val($(`tr[data-index=${i-1}] > td[data-field="endTime"] > input`).val())
                $(`tr[data-index=${i}] > td[data-field="endTime"] > input`).val(calculateEndTime($(`tr[data-index=${i}] > td[data-field="startTime"] > input`).val(), $(`tr[data-index=${i}] > td[data-field="duration"] > input`).val()))
            }
        }

        function updatedEndTime(index) {
            var rows = $("#rundown").find(`tr[class="userinput"]`)
            const endTimeEl = $(`tr[data-index=${index}] > td[data-field="endTime"] > input`)
            const durationEl = $(`tr[data-index=${index}] > td[data-field="duration"] > input`)
            const startTimeEl = $(`tr[data-index=${index}] > td[data-field="startTime"] > input`)

            durationEl.val(calculateDuration(startTimeEl.val(), endTimeEl.val()))

            const start = index + 1
                //console.log('start: ' + start)
            const stop = rows.length + 1
                //console.log('stop: ' + stop)
            for (var i = start; i < stop; i++) {
                //console.log('start recalc iteracio: ' + i)
                $(`tr[data-index=${i}] > td[data-field="startTime"] > input`).val($(`tr[data-index=${i-1}] > td[data-field="endTime"] > input`).val())
                $(`tr[data-index=${i}] > td[data-field="endTime"] > input`).val(calculateEndTime($(`tr[data-index=${i}] > td[data-field="startTime"] > input`).val(), $(`tr[data-index=${i}] > td[data-field="duration"] > input`).val()))
            }
        }

        function updatedDuration(index) {
            var rows = $("#rundown").find(`tr[class="userinput"]`)
            const endTimeEl = $(`tr[data-index=${index}] > td[data-field="endTime"] > input`)
            const durationEl = $(`tr[data-index=${index}] > td[data-field="duration"] > input`)
            const startTimeEl = $(`tr[data-index=${index}] > td[data-field="startTime"] > input`)

            endTimeEl.val(calculateEndTime(startTimeEl.val(), durationEl.val()))

            const start = index + 1
                //console.log('start: ' + start)
            const stop = rows.length + 1
                //console.log('stop: ' + stop)
            for (var i = start; i < stop; i++) {
                //console.log('start recalc iteracio: ' + i)
                $(`tr[data-index=${i}] > td[data-field="startTime"] > input`).val($(`tr[data-index=${i-1}] > td[data-field="endTime"] > input`).val())
                $(`tr[data-index=${i}] > td[data-field="endTime"] > input`).val(calculateEndTime($(`tr[data-index=${i}] > td[data-field="startTime"] > input`).val(), $(`tr[data-index=${i}] > td[data-field="duration"] > input`).val()))
            }
        }

        function isValidTimeFormat(inputString) {
            //console.log(`input: ${inputString}`)
            // Regular expression for 'HH:mm:ss' format
            var timeRegex = /^(?:[01]\d|2[0-3]):[0-5]\d:[0-5]\d$/

            // Test the input string against the regular expression
            const res = timeRegex.test(inputString)
                //console.log(`res: ${res}`)
            return res
        }

        function updateTableRemove(deletedIndex, ogStart) {
            deletedIndex = Number(deletedIndex)
            var rows = $("#rundown").find(`tr[class="userinput"]`)
                //console.log(rows)
            if (deletedIndex == 1) {
                for (var i = deletedIndex; i < rows.length + 1; i++) {
                    if (i == 1) {
                        console.log('iteracio: ' + i)
                            //$(`tr[data-index=${i+1}] > th[data-field="id"]`).text(i)
                        $(`tr[data-index=${i+1}] > th[data-field="id"] > input`).val(i)

                        const duration = $(`tr[data-index=${i+1}] > td[data-field="duration"] > input`).val()
                        console.log('ogStart: ' + ogStart)
                        console.log('duration: ' + duration)
                        const newEndTime = calculateEndTime(ogStart, duration)
                        console.log(newEndTime)

                        $(`tr[data-index=${i+1}] > td[data-field="startTime"] > input`).val(ogStart)
                        $(`tr[data-index=${i+1}] > td[data-field="endTime"] > input`).val(newEndTime)
                        $(`tr[data-index=${i+1}]`).attr('data-index', i)
                    } else {
                        console.log('iteracio: ' + i)
                            //$(`tr[data-index=${i+1}] > th[data-field="id"]`).text(i)
                        $(`tr[data-index=${i+1}] > th[data-field="id"] > input`).val(i)
                        const prevEndTime = $(`tr[data-index=${i-1}] > td[data-field="endTime"] > input`).val()
                        console.log(prevEndTime)
                        const duration = $(`tr[data-index=${i+1}] > td[data-field="duration"] > input`).val()
                        console.log(duration)
                        $(`tr[data-index=${i+1}] > td[data-field="startTime"] > input`).val(prevEndTime)
                        $(`tr[data-index=${i+1}] > td[data-field="endTime"] > input`).val(calculateEndTime(prevEndTime, duration))
                        $(`tr[data-index=${i+1}]`).attr('data-index', i)
                    }
                }

            } else {
                for (var i = deletedIndex; i < rows.length + 1; i++) {
                    console.log('iteracio: ' + i)
                        //$(`tr[data-index=${i+1}] > th[data-field="id"]`).text(i)
                    $(`tr[data-index=${i+1}] > th[data-field="id"] > input`).val(i)
                    const prevEndTime = $(`tr[data-index=${i-1}] > td[data-field="endTime"] > input`).val()
                    console.log(prevEndTime)
                    const duration = $(`tr[data-index=${i+1}] > td[data-field="duration"] > input`).val()
                    console.log(duration)
                    $(`tr[data-index=${i+1}] > td[data-field="startTime"] > input`).val(prevEndTime)
                    $(`tr[data-index=${i+1}] > td[data-field="endTime"] > input`).val(calculateEndTime(prevEndTime, duration))
                    $(`tr[data-index=${i+1}]`).attr('data-index', i)
                }
            }

        }

        function updatedId(index, htmlElementObj, ogIndex) {
            var htmlElement = htmlElementObj[0]
            index = Number(index)
            const firstStart = $(`#rundown > tbody > tr:nth-child(2) > td[data-field="startTime"] > input`).val()
            $(`#rundown > tbody > tr:nth-child(${index+1})`).before(htmlElement)
            var rows = $("#rundown").find(`tr[class="userinput"]`)
            if (index == 1) {
                const firstDuration = $(`#rundown > tbody > tr:nth-child(2) > td[data-field="duration"] > input`).val()
                $(`#rundown > tbody > tr:nth-child(2)`).attr('data-index', 1)
                $(`#rundown > tbody > tr:nth-child(2) > td[data-field="startTime"] > input`).val(firstStart)
                $(`#rundown > tbody > tr:nth-child(2) > td[data-field="endTime"] > input`).val(calculateEndTime(firstStart, firstDuration))
            }

            for (var i = 3; i < rows.length + 2; i++) {
                $(`#rundown > tbody > tr:nth-child(${i})`).attr('data-index', i - 1)
                const prevEnd = $(`#rundown > tbody > tr:nth-child(${i-1}) > td[data-field="endTime"] > input`).val()
                const duration = $(`#rundown > tbody > tr:nth-child(${i}) > td[data-field="duration"] > input`).val()
                $(`#rundown > tbody > tr:nth-child(${i}) > th > input`).val(i - 1)
                $(`#rundown > tbody > tr:nth-child(${i}) > td[data-field="startTime"] > input`).val(prevEnd)
                $(`#rundown > tbody > tr:nth-child(${i}) > td[data-field="endTime"] > input`).val(calculateEndTime(prevEnd, duration))

            }


        }


        function downloadJson() {
            // Get the table element
            var table = document.getElementById('rundown')

            // Get the table headers
            var headers = []
            var headerRow = table.rows[1]
            for (var i = 0; i < headerRow.cells.length - 1; i++) {
                headers.push(headerRow.cells[i].getAttribute('data-field'))
            }

            // Create an array to store the JSON objects
            var jsonData = []

            // Iterate through each row and create JSON objects
            for (var i = 1; i < table.rows.length - 1; i++) {
                var row = table.rows[i];
                var rowData = {};

                for (var j = 0; j < row.cells.length - 1; j++) {
                    var inputField = row.cells[j].querySelector('input');
                    if (inputField) {
                        rowData[headers[j]] = inputField.value;
                    }
                }
                console.log(rowData)
                jsonData.push(rowData);
            }

            jsonData.push({
                projectName: $('#project-name').val()
            })

            // Convert the array to JSON string
            var jsonString = JSON.stringify(jsonData, null, 2)

            // Create a Blob containing the JSON data
            var blob = new Blob([jsonString], {
                type: 'application/json'
            });

            // Create a link element to trigger the download
            var a = document.createElement('a')
            a.href = URL.createObjectURL(blob)
            a.download = `${ $('#project-name').val().replace(/ /g, '_') }.json`

            // Append the link to the document and trigger the download
            document.body.appendChild(a)
            a.click();

            // Clean up: remove the link element
            document.body.removeChild(a)
        }

        function loadJSON() {
            // Create an input element of type file
            const input = document.createElement('input')
            input.type = 'file'

            // Set up an event listener for the file input change
            input.addEventListener('change', handleFile)

            // Trigger a click on the file input to open the file dialog
            input.click()

            function handleFile(event) {
                const file = event.target.files[0]

                if (file) {
                    // Read the content of the file as text
                    const reader = new FileReader()
                    reader.onload = function(e) {
                        const jsonData = JSON.parse(e.target.result)
                        populateTable(jsonData)
                    }
                    reader.readAsText(file)
                }
            }

            function populateTable(jsonData) {
                const table = document.getElementById('rundown')

                // Clear existing table content
                table.innerHTML =
                    `
                <tr>
                    <th scope="col">#</th>
                    <th scope="col">Start Time</th>
                    <th scope="col">End Time</th>
                    <th scope="col">Duration</th>
                    <th scope="col">Title</th>
                    <th scope="col">PGM</th>
                    <th scope="col">EVS</th>
                    <th scope="col">CG</th>
                    <th scope="col">AUDIO</th>
                    <th scope="col">Notes</th>
                    <th scope="col">ACTIONS</th>
                </tr>

                <tr id="lastrow">
                    <td class="editable addrow " colspan="11"><button class="btn btn-success" id="add">üìù</button></td>
                </tr>
                `

                // Create table rows from JSON data

                for (var i = 0; i < jsonData.length - 1; i++) {
                    const row = document.createElement('tr')
                    Object.entries(jsonData[i]).forEach(([key, value]) => {
                            if (key == 'projectName') {
                                $('#project-name').val(value)
                            } else {
                                //console.log(`value: ${value}, key: ${key}`)
                                var cell
                                const input = document.createElement('input')
                                if (key == "id") {
                                    cell = document.createElement('th')
                                    row.dataset.index = value
                                    cell.className = 'editable id'
                                } else if (key == "startTime" || key == "endTime" || key == "duration") {
                                    cell = document.createElement('td')
                                    cell.className = 'editable time'
                                } else {
                                    cell = document.createElement('td')
                                    cell.className = 'editable'
                                }
                                cell.dataset.field = key

                                //input.type = 'text'
                                input.value = value
                                input.className = 'form-control-sm'
                                cell.appendChild(input)



                                row.className = "userinput"
                                row.appendChild(cell)
                            }

                        })
                        //console.log('---') // Separating each object for clarity
                    const additionalCell = document.createElement('td')
                    additionalCell.innerHTML = `
                        <button class="btn btn-primary duplicate">+</button>
                        <button class="btn btn-danger remove">X</button>
                    `
                    row.appendChild(additionalCell)
                    $('#lastrow').before(row)
                }
                $('#project-name').val(jsonData[jsonData.length - 1].projectName)
                const localSocketObj = getGlobalSocket()
                sendMessage(localSocketObj)
            }

        }
        function isOpen(ws) { return ws.readyState === ws.OPEN }

        function sendMessage(socket) {
            var message = generateSocketMessage()
                //console.log(JSON.stringify(message))
            if (!isOpen(socket)) return
            socket.send(JSON.stringify(message))
        }

        function generateSocketMessage() {
            // Get the table element
            var table = document.getElementById('rundown')

            // Get the table headers
            var headers = []
            var headerRow = table.rows[1]
            for (var i = 0; i < headerRow.cells.length - 1; i++) {
                headers.push(headerRow.cells[i].getAttribute('data-field'))
            }

            // Create an array to store the JSON objects
            var jsonData = []

            // Iterate through each row and create JSON objects
            for (var i = 1; i < table.rows.length - 1; i++) {
                var row = table.rows[i]
                var rowData = {}

                for (var j = 0; j < row.cells.length - 1; j++) {
                    var inputField = row.cells[j].querySelector('input')
                    rowData[headers[j]] = inputField.value

                }

                jsonData.push(rowData);
            }

            jsonData.push({
                projectName: $('#project-name').val()
            })

            return jsonData
        }



        $(document).ready(function() {
            const socket = new WebSocket('wss://e1-shoflo.onrender.com')
            setGlobalSocket(socket)
            getGlobalSocket()
            $('body').on('click', '#add', function() {
                var rows = $("#rundown").find(`tr[class="userinput"]`)
                const lastEl = rows[rows.length - 1]
                var index = lastEl.getAttribute('data-index')
                index = Number(index)
                const startTime = $(`tr[data-index=${index}] > td[data-field="endTime"] > input`).val()
                if (startTime != "") {
                    index++
                    $('#lastrow').before(`
                    <tr data-index=${index} class="userinput">
                    <th class="editable id"  data-field="id"><input class="form-control-sm"></td>
                    <td class="editable time"  data-field="startTime"><input class="form-control-sm"></td>
                    <td class="editable time"  data-field="endTime"><input class="form-control-sm"></td>
                    <td class="editable time"  data-field="duration"><input class="form-control-sm"></td>
                    <td class="editable"  data-field="title"><input class="form-control-sm"></td>
                    <td class="editable"  data-field="pgm"><input class="form-control-sm"></td>
                    <td class="editable"  data-field="evs"><input class="form-control-sm"></td>
                    <td class="editable"  data-field="cg"><input class="form-control-sm"></td>
                    <td class="editable"  data-field="audio"><input class="form-control-sm"></td>
                    <td class="editable"  data-field="notes"><input class="form-control-sm"></td>
                    <td>
                    <button class="btn btn-primary duplicate">+</button>
                    <button class="btn btn-danger remove">X</button>
                    </td>
                    </tr>
                    `)
                    $(`tr[data-index=${index}] > th[data-field="id"] > input`).val(index)
                    $(`tr[data-index=${index}] > td[data-field="startTime"] > input`).val(startTime)
                    $(`tr[data-index=${index}] > td[data-field="startTime"] > input`).focus()
                }
                sendMessage(socket)
            })

            $('body').on('click', '.remove', function() {
                var index = $(this).parent().parent().attr('data-index')
                index = Number(index)
                var ogStart = $(`tr[data-index=${index}] > td[data-field="startTime"] > input`).val()
                var rows = $("#rundown").find(`tr[class="userinput"]`)
                    //console.log(rows.length)
                if (rows.length > 1) {
                    $(this).parent().parent().remove()
                    console.log(index, ogStart)
                    updateTableRemove(index, ogStart)
                } else {
                    alert(`You must have at least 1 segment!`)
                        //$('.alert').alert()
                }
                sendMessage(socket)
            })

            $('body').on('click', '.duplicate', function() {
                var index = $(this).parent().parent().attr('data-index')
                index = Number(index)
                var rows = $("#rundown").find(`tr[class="userinput"]`)
                var ogDuration = $(`tr[data-index=${index}] > td[data-field="duration"] > input`).val()
                var ogInfo = []
                for (var x = 5; x < 11; x++) {
                    ogInfo.push($(`tr[data-index=${index}] > td:nth-child(${x}) > input`).val())
                        //console.log('pushed, iteracio: ' + x)
                }
                //console.log(ogInfo)

                const lastEl = rows[rows.length - 1]
                var last_index = lastEl.getAttribute('data-index')
                last_index = Number(last_index)
                const startTime = $(`tr[data-index=${last_index}] > td[data-field="endTime"] > input`).val()
                if (startTime != "") {
                    last_index++
                    $('#lastrow').before(`
                    <tr data-index=${last_index} class="userinput">
                    <th class="editable id"  data-field="id"><input class="form-control-sm"></td>
                    <td class="editable time"  data-field="startTime"><input class="form-control-sm"></td>
                    <td class="editable time"  data-field="endTime"><input class="form-control-sm"></td>
                    <td class="editable time"  data-field="duration"><input class="form-control-sm"></td>
                    <td class="editable"  data-field="title"><input class="form-control-sm"></td>
                    <td class="editable"  data-field="pgm"><input class="form-control-sm"></td>
                    <td class="editable"  data-field="evs"><input class="form-control-sm"></td>
                    <td class="editable"  data-field="cg"><input class="form-control-sm"></td>
                    <td class="editable"  data-field="audio"><input class="form-control-sm"></td>
                    <td class="editable"  data-field="notes"><input class="form-control-sm"></td>
                    <td>
                    <button class="btn btn-primary duplicate">+</button>
                    <button class="btn btn-danger remove">X</button>
                    </td>
                    </tr>
                    `)
                    $(`tr[data-index=${last_index}] > th[data-field="id"] > input`).val(last_index)
                    $(`tr[data-index=${last_index}] > td[data-field="startTime"] > input`).val(startTime)
                    $(`tr[data-index=${last_index}] > td[data-field="duration"] > input`).val(ogDuration)
                    $(`tr[data-index=${last_index}] > td[data-field="endTime"] > input`).val(calculateEndTime(startTime, ogDuration))
                    for (var y = 5; y < 11; y++) {
                        $(`tr[data-index=${last_index}] > td:nth-child(${y}) > input`).val(ogInfo[y - 5])
                    }
                }
                sendMessage(socket)
            })

            $('body').on('keyup', 'input', function(event) {
                if (event.key === 'Enter') {
                    if ($(this).parent().hasClass('time') && !(isValidTimeFormat($(this).val()))) {
                        alert('Invalid format')
                        $(this).val("")
                    } else if ($(this).parent().hasClass('id')) {
                        var index = $(this).val()
                        const ogIndex = $(this).parent().parent().attr('data-index')
                        const element = $(this).parent().parent()
                        $(this).parent().parent().remove()
                        updatedId(Number(index), element, ogIndex)
                        sendMessage(socket)
                    } else {
                        $(this).blur()
                        if ($(this).parent().attr('data-field') == 'startTime') {
                            updatedStartTime(Number($(this).parent().parent().attr('data-index')))
                        }
                        if ($(this).parent().attr('data-field') == 'duration') {
                            updatedDuration(Number($(this).parent().parent().attr('data-index')))
                        }
                        if ($(this).parent().attr('data-field') == 'endTime') {
                            updatedEndTime(Number($(this).parent().parent().attr('data-index')))
                        }
                        sendMessage(socket)
                    }
                }
            })

            $('body').on('input', 'input', function(event) {
                sendMessage(socket)
            })


            $(document).bind('keydown', 'Shift+return', function() {
                //alert('triggered')
                $('#add').click()
            })
        })
    </script>
</body>

</html>